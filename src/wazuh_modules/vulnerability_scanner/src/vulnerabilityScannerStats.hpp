/*
 * Wazuh Vulnerability scanner
 * Copyright (C) 2015, Wazuh Inc.
 * Jan 1, 2025.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "singleton.hpp"
#include <mutex>
#include <string>
#include "json.hpp"
#include <unordered_map>
#include <fstream>

#ifndef VULNERABILITY_SCANNER_STATS_HPP
#define VULNERABILITY_SCANNER_STATS_HPP

class VulnerabilityScannerStats : public Singleton<VulnerabilityScannerStats>
{
private:
    std::unordered_map<std::string, unsigned long long int> m_stats;
    std::mutex m_mutex;

public:
    void increment(const std::string& key)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        try
        {
            m_stats.at(key)++;
        }
        catch (...)
        {
            m_stats[key] = 1;
        }
    }

    std::string dump()
    {
        nlohmann::json stats;
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            for (const auto& stat : m_stats)
            {
                stats[stat.first] = stat.second;
            }
        }

        return stats.empty() ? "{}" : stats.dump(4);
    }

    void saveToFile(const std::string& path)
    {
        std::ofstream file(path);
        if (file.is_open())
        {
            file << "## Vulnerability Scanner Stats from last run ##\n";
            file << dump();
            file << "\n";
            file.close();
        }
    }
};

#endif // VULNERABILITY_SCANNER_STATS_HPP
