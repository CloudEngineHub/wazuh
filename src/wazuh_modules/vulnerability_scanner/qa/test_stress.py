from pathlib import Path
import socket
import subprocess
import logging
import argparse
import json as Json
import os

LOGGER = logging.getLogger(__name__)


def sendflatbuffer_to_unixsocket(data):
    # Create a unix socket
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    # Connect to the socket
    try:
        # Check if the socket exists
        if not Path("/var/ossec/queue/router/deltas-syscollector").exists():
            LOGGER.info("Socket does not exists")
            return None
        sock.connect("/var/ossec/queue/router/deltas-syscollector")
        size = len(data)+5;
        data_to_send = size.to_bytes(4, byteorder="little")
        header_size = 1
        data_to_send += header_size.to_bytes(4, byteorder="little")
        data_to_send += b"P"
        data_to_send += data

        # Send the data
        sock.send(data_to_send)

    except Exception as e:
        LOGGER.info(f"Socket error {e}")
        return None


def json2binary(test, output):
    command = ["external/flatbuffers/build/flatc", "--binary", "-o", output, "shared_modules/utils/flatbuffers/schemas/syscollectorDeltas/syscollector_deltas.fbs", test]
    # Execute the flatbuffer compiler
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)

    # if the result is not 0, stop the test
    assert result.returncode == 0, f"Error: {result.stdout}"



def run_tests(test_folder, agents):
    # # Create temp folder innfer the test folder
    temp_folder = os.path.join(test_folder, "temp")
    if not os.path.exists(temp_folder):
        os.makedirs(temp_folder)

    # Remove if any existing files or folders exists.
    os.system("rm -rf " + temp_folder + "/*")

    # Load json template of os info.
    os_template = os.path.join(test_folder, "os.json")
    with open(os_template) as f:
        # Parse json file.
        os_info = Json.load(f)

    # Load json template of packages info.
    packages_template = os.path.join(test_folder, "packages.json")
    with open(packages_template) as f:
        # Parse json file.
        package_info = Json.load(f)

    # Read the flatbuffer data and store in memory dictionary.
    dict_os_fb_data = {}

    print("Creating OS info")
    #Create the agents
    for i in range(int(agents)):
        agent_with_zero_padding = str(i).zfill(3)
        json_file = os.path.join(temp_folder, "input_os_" + str(i) + ".json")
        # Write json payload to the file
        with open(json_file, "w") as f:
            json = {
                "agent_info": {
                    "agent_id": agent_with_zero_padding
                },
                "data_type": "dbsync_osinfo",
                "data": os_info,
                "operation": "INSERTED"
            }
            f.write(Json.dumps(json))

        # Convert the json data to flatbuffer
        json_fb_file = str(json_file).replace(".json", ".bin")
        json2binary(json_file, temp_folder)

        with open(json_fb_file, "rb") as f:
            flatbuffer_data = f.read()
            dict_os_fb_data[str(i)] = flatbuffer_data

    print("Creating packages")

    json_package_template = \
    {   "architecture": "",
        "checksum": "ABCDEFG",
        "description": "",
        "format": "",
        "groups": "NONE",
        "install_time": "2024/06/06 00:00:00",
        "location": "",
        "multiarch": "null",
        "name": "",
        "priority": "optional",
        "scan_time": "2023/12/1915:32:25",
        "size": "0",
        "source": "",
        "vendor": "",
        "version": ""
    }

    dict_packages_fb_data = {}
    # Create the packages
    for i in range(int(agents)):
        agent_with_zero_padding = str(i).zfill(3)

        # iterate over the packages json vector.
        for package in package_info:
            key = str(i) + "_" + package["product"] + "_" + package["version"]
            json_file = os.path.join(temp_folder, "input_packages_" + key + ".json")
            # Write json payload to the file
            with open(json_file, "w") as f:
                json_package = json_package_template.copy()
                json_package["name"] = package["product"]
                json_package["version"] = package["version"]
                json_package["vendor"] = package["vendor"]

                json = {
                    "agent_info": {
                        "agent_id": agent_with_zero_padding
                    },
                    "data_type": "dbsync_packages",
                    "data": json_package,
                    "operation": "INSERTED"
                }
                f.write(Json.dumps(json))

            # Convert the json data to flatbuffer
            json_fb_file = str(json_file).replace(".json", ".bin")
            json2binary(json_file, temp_folder)

            # Read the flatbuffer data and store in memory dictionary.
            with open(json_fb_file, "rb") as f:
                flatbuffer_data = f.read()
                dict_packages_fb_data[key] = flatbuffer_data

    print("Sending OS data to the unix socket")
    # Send the os info to the unix socket
    for i in range(int(agents)):
        print("Sending OS info for agent: "+ str(i))
        sendflatbuffer_to_unixsocket(dict_os_fb_data[str(i)])

    print("Sending Packages data to the unix socket")
    # Send the packages info to the unix socket
    for key in dict_packages_fb_data:
        print("Sending package: "+ key)
        sendflatbuffer_to_unixsocket(dict_packages_fb_data[key])

# Parse the arguments
parser = argparse.ArgumentParser()
parser.add_argument("--test_folder", help="Test folder", required=True)
# parse number of agents.
parser.add_argument("--agents", help="Number of agents", required=True)
args = parser.parse_args()

# Run the tests
run_tests(args.test_folder, args.agents)
