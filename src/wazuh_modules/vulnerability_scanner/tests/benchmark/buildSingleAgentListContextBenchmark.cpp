/*
 * Wazuh Vulnerability scanner - Benchmark tests
 * Copyright (C) 2015, Wazuh Inc.
 * December 31, 2024.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "buildSingleAgentListContext.hpp"
#include <benchmark/benchmark.h>

class MockSocketDBWrapper : public Singleton<MockSocketDBWrapper>
{
public:
    /**
     * @brief Returns a mocked JSON response.
     *
     * @param query Query. Ignored.
     * @param response The JSON response.
     */
    void query(const std::string& query, nlohmann::json& response)
    {
        response = nlohmann::json::parse(R"([{"name": "test_name", "version": "v4.10.0", "ip": "192.168.0.1"}])");
    }
};

class MockScanContext
{
private:
    std::string m_clusterNodeName; ///< Cluster node name.
    std::string m_agentId;         ///< Agent ID.

public:
    MockScanContext() = default;

    /**
     * @brief Construct a new Mock Scan Context object with parameters.
     *
     * @param clusterNodeName The cluster node name.
     * @param agentId The agent ID.
     */
    MockScanContext(std::string clusterNodeName, std::string agentId)
        : m_clusterNodeName(clusterNodeName)
        , m_agentId(agentId)
    {
    }

    /**
     * @brief Returns the cluster status. Fixed to true.
     *
     * @return true Always returns.
     * @return false Unused.
     */
    bool clusterStatus() const
    {
        return true;
    }

    /**
     * @brief Returns the cluster node name.
     *
     * @return std::string_view The cluster node name.
     */
    std::string_view clusterNodeName() const
    {
        return m_clusterNodeName;
    }

    /**
     * @brief Returns the agent ID.
     *
     * @return std::string_view The agent ID.
     */
    std::string_view agentId() const
    {
        return m_agentId;
    }

    std::vector<AgentData> m_agents; ///< Agent data list.
};

/**
 * @brief This class is used to test the performance of the build single agent list context.
 *
 */
class BuildSingleAgentListContextFixture : public benchmark::Fixture
{
protected:
    std::shared_ptr<MockScanContext> scanContext; ///< Mock scan context.
    TBuildSingleAgentListInfoContext<MockScanContext, MockSocketDBWrapper>
        buildSingleAgentListInfoContext {}; ///< Build single agent list context.

public:
    /**
     * @brief Benchmark setup routine.
     *
     * @param state Benchmark state.
     */
    void SetUp(const ::benchmark::State& state) override
    {
        scanContext = std::make_shared<MockScanContext>("node01", "test_agent");
    }

    /**
     * @brief Benchmark teardown routine.
     *
     * @param state Benchmark state.
     */
    void TearDown(const ::benchmark::State& state) override {}
};

BENCHMARK_DEFINE_F(BuildSingleAgentListContextFixture, BuildContextPerformance)(benchmark::State& state)
{
    for (auto _ : state)
    {
        buildSingleAgentListInfoContext.handleRequest(scanContext);
    }
}

BENCHMARK_REGISTER_F(BuildSingleAgentListContextFixture, BuildContextPerformance)->Iterations(100000)->Threads(1);
